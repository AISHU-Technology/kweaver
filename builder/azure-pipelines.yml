# Starter pipeline
#

trigger:
  branches:
    include:
      - release
      - develop
      - DATA-*

pool:
  name: python

parameters:
  - name: jobTag
    displayName: 请手动输入程序的数据库版本值
    type: string
    default: '1.1.5'

variables:
  - group: global-context
  - name: imageTag
    value: $(Build.SourceBranchName)-$(Build.BuildNumber)
  - name: imageName
    value: kg-builder
  - name: imageNameJob
    value: kg-builder-job
  - name: imageNameJobFtp
    value: kg-builder-job
  - name: UTArtifactName
    value: coverageFiles

resources:
  containers:
    - container: scanner
      endpoint: acr.aishu.cn
      image: ad/openjdk:11.0.13-jre
    - container: dotnet
      endpoint: acr.aishu.cn
      image: wing-biz/euop/dotnet-runtime:3.1

jobs:
  - job: buildjob
    displayName: buildJob
    steps:
      - task: Bash@3
        displayName: job compile
        inputs:
          targetType: 'inline'
          script: |
            cd ./db_migrate;\
            /root/anaconda3/envs/python3.6.2/bin/pyinstaller -F -p ./../ builder_table.py
      - task: Docker@2
        displayName: buildImage
        inputs:
          command: 'build'
          repository: $(imageNameJob)
          tags: $(mainTag)
          Dockerfile: '**/Dockerfilejob'
      - task: Bash@3
        displayName: saveTar
        inputs:
          targetType: 'inline'
          script: |
            docker tag $(imageNameJob):$(mainTag) $(harborUrl)/$(imageNameJob):$(mainTag)
            docker save -o AnyDATA-$(mainTag)-builder-${{parameters.jobTag}}-job-$(Build.BuildNumber).tar $(harborUrl)/$(imageNameJob):$(mainTag)
      - task: FtpUpload@2
        displayName: uploadFtp
        inputs:
          credentialsOption: 'inputs'
          serverUrl: 'ftp://ftp-ad.aishu.cn'
          username: '$(ftpUser)'
          password: '$(ftpPasswd)'
          rootDirectory:
          filePatterns: '**/AnyDATA-$(mainTag)-builder*.tar'
          remoteDirectory: '/packages/$(imageNameJobFtp)/$(Build.SourceBranchName)'
          clean: false
          cleanContents: false
          preservePaths: false
          trustSSL: false

  - job: utmake
    displayName: utmake
    workspace:
      clean: all
    steps:
      - checkout: self
      - task: Bash@3
        displayName: utRun
        inputs:
          targetType: 'inline'
          script: |
            /root/anaconda3/envs/python3.6.2/bin/python coverage_ut.py
      - task: CopyFiles@2
        inputs:
          SourceFolder: $(Build.SourcesDirectory)
          contents: |
            coverage.xml
            coverage_result/*
          targetFolder: $(Build.BinariesDirectory)
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.BinariesDirectory)'
          ArtifactName:  ${{variables.UTArtifactName}}

  - job: coverage
    displayName: coverage
    container: dotnet
    dependsOn: utmake
    steps:
      - checkout: none
      - task: DownloadBuildArtifacts@0
        inputs:
          artifactName: ${{variables.UTArtifactName}}
          downloadPath: $(Build.SourcesDirectory)

      - task: PublishCodeCoverageResults@1
        displayName: Publish ALL Code Coverage Report
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(Build.SourcesDirectory)/${{variables.UTArtifactName}}/coverage.xml'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: "JUnit"
          testResultsFiles: '$(Build.SourcesDirectory)/${{variables.UTArtifactName}}/coverage_result/*.xml'
          testRunTitle: 'UT Result'
          failTaskOnFailedTests: true
        displayName: 'Publish linting and unit test results'

  - job: scan
    displayName: 静态扫描
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    container: scanner
    dependsOn: [utmake, coverage]
    workspace:
      clean: all
    steps:
      - task: SonarQubePrepare@4
        displayName: Prepare SonarQube
        inputs:
          SonarQube: 'adS'
          scannerMode: 'CLI'
          configMode: 'manual'
          cliProjectKey: 'sonar.gbuilder-builder'
          cliProjectName: 'gbuilder-builder'
          cliSources: '.'
      - task: SonarQubeAnalyze@4
        displayName: Run SonarQube Code Analysis task

      - task: SonarQubePublish@4
        displayName: Publish Quality Gate Result task
        inputs:
          pollingTimeoutSec: '300'

  - job:
    timeoutInMinutes: 120
    displayName: build
    workspace:
      clean: all
    steps:
    - task: Docker@2
      displayName: buildImage
      inputs:
        command: 'build'
        repository: $(imageName)
        tags: $(mainTag)
        Dockerfile: '**/Dockerfile'
    - task: Bash@3
      displayName: saveTar
      inputs:
        targetType: 'inline'
        script: |
          docker tag $(imageName):$(mainTag) $(harborUrl)/$(imageName):$(mainTag)
          docker save -o AnyDATA-$(mainTag)-$(imageName)-$(imageTag).tar $(harborUrl)/$(imageName):$(mainTag)
    - task: FtpUpload@2
      displayName: uploadFtp
      inputs:
        credentialsOption: 'inputs'
        serverUrl: 'ftp://ftp-ad.aishu.cn'
        username: '$(ftpUser)'
        password: '$(ftpPasswd)'
        rootDirectory:
        filePatterns: '**/AnyDATA-$(mainTag)-$(imageName)*.tar'
        remoteDirectory: '/packages/$(imageName)/$(Build.SourceBranchName)'
        clean: false
        cleanContents: false
        preservePaths: false
        trustSSL: false



