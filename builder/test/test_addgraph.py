# -*- coding:utf-8 -*-
import unittest
from unittest import mock
import pandas as pd
from dao.graph_dao import graph_dao
from service.graph_Service import graph_Service


class AddgraphTest(unittest.TestCase):
    def setUp(self):
        self.graph_config_table = [
            [55, '2021-07-14 09:54:29', 'lzg_test2', 'finish',
             "[{'graph_Name': 'lzg_test2', 'graph_des': '', 'graphDBAddress': '1.2.3.4', 'graph_DBName': 'lzg_test2'}]",
             '[11]', '[77]',
             "[{'entity': [{'entity_id': 1, 'colour': '#CDDC39', 'ds_name': '', 'dataType': '', 'data_source': '', 'ds_path': '', 'ds_id': '', 'extract_type': '', 'name': 'folder', 'source_table': [], 'source_type': 'automatic', 'properties': [['name', 'string'], ['path', 'string'], ['gns', 'string'], ['create_time', 'string'], ['rev', 'string']], 'file_type': '', 'task_id': '', 'properties_index': ['name', 'path', 'gns', 'create_time', 'rev'], 'model': 'Anysharedocumentmodel'}, {'entity_id': 2, 'colour': '#E91F64', 'ds_name': '', 'dataType': '', 'data_source': '', 'ds_path': '', 'ds_id': '', 'extract_type': '', 'name': 'document', 'source_table': [], 'source_type': 'automatic', 'properties': [['name', 'string'], ['path', 'string'], ['creator', 'string'], ['create_time', 'string'], ['editor', 'string'], ['gns', 'string'], ['file_type', 'string'], ['modified_time', 'string'], ['rev', 'string']], 'file_type': '', 'task_id': '', 'properties_index': ['name', 'path', 'creator', 'create_time', 'editor', 'gns', 'file_type', 'modified_time', 'rev'], 'model': 'Anysharedocumentmodel'}, {'entity_id': 3, 'colour': '#795648', 'ds_name': '', 'dataType': '', 'data_source': '', 'ds_path': '', 'ds_id': '', 'extract_type': '', 'name': 'chapter', 'source_table': [], 'source_type': 'automatic', 'properties': [['name', 'string'], ['path', 'string'], ['level', 'string']], 'file_type': '', 'task_id': '', 'properties_index': ['name', 'path', 'level'], 'model': 'Anysharedocumentmodel'}, {'entity_id': 4, 'colour': '#374047', 'ds_name': '', 'dataType': '', 'data_source': '', 'ds_path': '', 'ds_id': '', 'extract_type': '', 'name': 'text', 'source_table': [], 'source_type': 'automatic', 'properties': [['name', 'string']], 'file_type': '', 'task_id': '', 'properties_index': ['name'], 'model': 'Anysharedocumentmodel'}, {'entity_id': 5, 'colour': '#374047', 'ds_name': '', 'dataType': '', 'data_source': '', 'ds_path': '', 'ds_id': '', 'extract_type': '', 'name': 'label', 'source_table': [], 'source_type': 'automatic', 'properties': [['name', 'string'], ['confidence', 'float'], ['adlabel_kcid', 'string'], ['kc_topic_tags', 'string'], ['type_as', 'boolean'], ['type_sa', 'boolean'], ['type_nw', 'boolean'], ['type_kc', 'boolean']], 'file_type': '', 'task_id': '', 'properties_index': ['name', 'confidence', 'adlabel_kcid', 'kc_topic_tags', 'type_as', 'type_sa', 'type_nw', 'type_kc'], 'model': 'Anysharedocumentmodel'}, {'entity_id': 6, 'colour': '#354675', 'ds_name': '', 'dataType': '', 'data_source': '', 'ds_path': '', 'ds_id': '', 'extract_type': '', 'name': 'desc', 'source_table': [], 'source_type': 'automatic', 'properties': [['name', 'string']], 'file_type': '', 'task_id': '', 'properties_index': ['name'], 'model': 'Anysharedocumentmodel'}], 'edge': [{'edge_id': 1, 'colour': '#00BDD4', 'ds_name': '', 'dataType': '', 'data_source': '', 'ds_path': '', 'ds_id': '', 'extract_type': '', 'name': 'desc2document', 'source_table': [], 'source_type': 'automatic', 'properties': [['name', 'string']], 'file_type': '', 'task_id': '', 'properties_index': ['name'], 'model': 'Anysharedocumentmodel', 'relations': ['desc', 'desc2document', 'document']}, {'edge_id': 2, 'colour': '#9E9E9E', 'ds_name': '', 'dataType': '', 'data_source': '', 'ds_path': '', 'ds_id': '', 'extract_type': '', 'name': 'desc2label', 'source_table': [], 'source_type': 'automatic', 'properties': [['name', 'string'], ['weight', 'float']], 'file_type': '', 'task_id': '', 'properties_index': ['name', 'weight'], 'model': 'Anysharedocumentmodel', 'relations': ['desc', 'desc2label', 'label']}, {'edge_id': 3, 'colour': '#0288D1', 'ds_name': '', 'dataType': '', 'data_source': '', 'ds_path': '', 'ds_id': '', 'extract_type': '', 'name': 'folder2folder', 'source_table': [], 'source_type': 'automatic', 'properties': [['name', 'string']], 'file_type': '', 'task_id': '', 'properties_index': ['name'], 'model': 'Anysharedocumentmodel', 'relations': ['folder', 'folder2folder', 'folder']}, {'edge_id': 4, 'colour': '#F44336', 'ds_name': '', 'dataType': '', 'data_source': '', 'ds_path': '', 'ds_id': '', 'extract_type': '', 'name': 'folder2document', 'source_table': [], 'source_type': 'automatic', 'properties': [['name', 'string']], 'file_type': '', 'task_id': '', 'properties_index': ['name'], 'model': 'Anysharedocumentmodel', 'relations': ['folder', 'folder2document', 'document']}, {'edge_id': 5, 'colour': '#9E9E9E', 'ds_name': '', 'dataType': '', 'data_source': '', 'ds_path': '', 'ds_id': '', 'extract_type': '', 'name': 'document2chapter', 'source_table': [], 'source_type': 'automatic', 'properties': [['name', 'string']], 'file_type': '', 'task_id': '', 'properties_index': ['name'], 'model': 'Anysharedocumentmodel', 'relations': ['document', 'document2chapter', 'chapter']}, {'edge_id': 6, 'colour': '#FFC106', 'ds_name': '', 'dataType': '', 'data_source': '', 'ds_path': '', 'ds_id': '', 'extract_type': '', 'name': 'document2text', 'source_table': [], 'source_type': 'automatic', 'properties': [['name', 'string']], 'file_type': '', 'task_id': '', 'properties_index': ['name'], 'model': 'Anysharedocumentmodel', 'relations': ['document', 'document2text', 'text']}, {'edge_id': 7, 'colour': '#CDDC39', 'ds_name': '', 'dataType': '', 'data_source': '', 'ds_path': '', 'ds_id': '', 'extract_type': '', 'name': 'text2text', 'source_table': [], 'source_type': 'automatic', 'properties': [['name', 'string']], 'file_type': '', 'task_id': '', 'properties_index': ['name'], 'model': 'Anysharedocumentmodel', 'relations': ['text', 'text2text', 'text']}, {'edge_id': 8, 'colour': '#00BDD4', 'ds_name': '', 'dataType': '', 'data_source': '', 'ds_path': '', 'ds_id': '', 'extract_type': '', 'name': 'chapter2text', 'source_table': [], 'source_type': 'automatic', 'properties': [['name', 'string']], 'file_type': '', 'task_id': '', 'properties_index': ['name'], 'model': 'Anysharedocumentmodel', 'relations': ['chapter', 'chapter2text', 'text']}, {'edge_id': 9, 'colour': '#E91F64', 'ds_name': '', 'dataType': '', 'data_source': '', 'ds_path': '', 'ds_id': '', 'extract_type': '', 'name': 'label2label', 'source_table': [], 'source_type': 'automatic', 'properties': [['name', 'string'], ['weight', 'float']], 'file_type': '', 'task_id': '', 'properties_index': ['name', 'weight'], 'model': 'Anysharedocumentmodel', 'relations': ['label', 'label2label', 'label']}, {'edge_id': 10, 'colour': '#B31ACC', 'ds_name': '', 'dataType': '', 'data_source': '', 'ds_path': '', 'ds_id': '', 'extract_type': '', 'name': 'label2document', 'source_table': [], 'source_type': 'automatic', 'properties': [['name', 'string'], ['weight', 'float']], 'file_type': '', 'task_id': '', 'properties_index': ['name', 'weight'], 'model': 'Anysharedocumentmodel', 'relations': ['label', 'label2document', 'document']}], 'used_task': [], 'id': 77, 'ontology_id': '77', 'ontology_name': '666', 'ontology_des': ''}]",
             "[{'ds_name': '133', 'ds_id': 11, 'data_source': 'as7', 'ds_path': 'DataSet', 'file_source': 'gns://DA5596D930134D7B8BBB230BF9D4A0D6/CC1723B369B64F7EB55E3F38AFD37C49/548A1339F2904CBDA5873852EE3B5F36', 'file_name': '地理', 'file_path': 'DataSet/21CN/地理', 'extract_type': 'modelExtraction', 'extract_model': 'Anysharedocumentmodel', 'extract_rules': [{'is_model': 'from_model', 'entity_type': 'folder', 'property': {'property_field': 'name', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'folder', 'property': {'property_field': 'path', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'folder', 'property': {'property_field': 'gns', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'folder', 'property': {'property_field': 'create_time', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'folder', 'property': {'property_field': 'rev', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'document', 'property': {'property_field': 'name', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'document', 'property': {'property_field': 'path', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'document', 'property': {'property_field': 'creator', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'document', 'property': {'property_field': 'create_time', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'document', 'property': {'property_field': 'editor', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'document', 'property': {'property_field': 'gns', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'document', 'property': {'property_field': 'file_type', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'document', 'property': {'property_field': 'modified_time', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'document', 'property': {'property_field': 'rev', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'chapter', 'property': {'property_field': 'name', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'chapter', 'property': {'property_field': 'path', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'chapter', 'property': {'property_field': 'level', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'text', 'property': {'property_field': 'name', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'label', 'property': {'property_field': 'name', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'label', 'property': {'property_field': 'confidence', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'label', 'property': {'property_field': 'adlabel_kcid', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'label', 'property': {'property_field': 'kc_topic_tags', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'label', 'property': {'property_field': 'type_as', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'label', 'property': {'property_field': 'type_sa', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'label', 'property': {'property_field': 'type_nw', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'label', 'property': {'property_field': 'type_kc', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'desc', 'property': {'property_field': 'name', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'desc2document', 'property': {'property_field': 'name', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'desc2label', 'property': {'property_field': 'name', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'desc2label', 'property': {'property_field': 'weight', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'document2text', 'property': {'property_field': 'name', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'text2text', 'property': {'property_field': 'name', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'document2chapter', 'property': {'property_field': 'name', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'folder2document', 'property': {'property_field': 'name', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'folder2folder', 'property': {'property_field': 'name', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'chapter2text', 'property': {'property_field': 'name', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'label2label', 'property': {'property_field': 'name', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'label2label', 'property': {'property_field': 'weight', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'label2document', 'property': {'property_field': 'name', 'property_func': 'All'}}, {'is_model': 'from_model', 'entity_type': 'label2document', 'property': {'property_field': 'weight', 'property_func': 'All'}}]}]",
             "[{'otls_map': [{'otl_name': 'folder', 'entity_type': 'folder', 'key_property': 'name', 'property_map': [{'otl_prop': 'name', 'entity_prop': 'name'}, {'otl_prop': 'path', 'entity_prop': 'path'}, {'otl_prop': 'gns', 'entity_prop': 'gns'}, {'otl_prop': 'create_time', 'entity_prop': 'create_time'}, {'otl_prop': 'rev', 'entity_prop': 'rev'}]}, {'otl_name': 'document', 'entity_type': 'document', 'key_property': 'name', 'property_map': [{'otl_prop': 'name', 'entity_prop': 'name'}, {'otl_prop': 'path', 'entity_prop': 'path'}, {'otl_prop': 'creator', 'entity_prop': 'creator'}, {'otl_prop': 'create_time', 'entity_prop': 'create_time'}, {'otl_prop': 'editor', 'entity_prop': 'editor'}, {'otl_prop': 'gns', 'entity_prop': 'gns'}, {'otl_prop': 'file_type', 'entity_prop': 'file_type'}, {'otl_prop': 'modified_time', 'entity_prop': 'modified_time'}, {'otl_prop': 'rev', 'entity_prop': 'rev'}]}, {'otl_name': 'chapter', 'entity_type': 'chapter', 'key_property': 'name', 'property_map': [{'otl_prop': 'name', 'entity_prop': 'name'}, {'otl_prop': 'path', 'entity_prop': 'path'}, {'otl_prop': 'level', 'entity_prop': 'level'}]}, {'otl_name': 'text', 'entity_type': 'text', 'key_property': 'name', 'property_map': [{'otl_prop': 'name', 'entity_prop': 'name'}]}, {'otl_name': 'label', 'entity_type': 'label', 'key_property': 'name', 'property_map': [{'otl_prop': 'name', 'entity_prop': 'name'}, {'otl_prop': 'confidence', 'entity_prop': 'confidence'}, {'otl_prop': 'adlabel_kcid', 'entity_prop': 'adlabel_kcid'}, {'otl_prop': 'kc_topic_tags', 'entity_prop': 'kc_topic_tags'}, {'otl_prop': 'type_as', 'entity_prop': 'type_as'}, {'otl_prop': 'type_sa', 'entity_prop': 'type_sa'}, {'otl_prop': 'type_nw', 'entity_prop': 'type_nw'}, {'otl_prop': 'type_kc', 'entity_prop': 'type_kc'}]}, {'otl_name': 'desc', 'entity_type': 'desc', 'key_property': 'name', 'property_map': [{'otl_prop': 'name', 'entity_prop': 'name'}]}], 'relations_map': [{'relation_info': {'begin_name': 'desc', 'edge_name': 'desc2document', 'end_name': 'document', 'entity_type': 'desc2document', 'key_property': 'name'}, 'property_map': [{'edge_prop': 'name', 'entity_prop': 'name'}], 'relation_map': [{'Multi_relation': '文档结构关系', 'begin_prop': '', 'end_prop': '', 'edge_prop': ['', '']}]}, {'relation_info': {'begin_name': 'desc', 'edge_name': 'desc2label', 'end_name': 'label', 'entity_type': 'desc2label', 'key_property': 'name'}, 'property_map': [{'edge_prop': 'name', 'entity_prop': 'name'}, {'edge_prop': 'weight', 'entity_prop': 'weight'}], 'relation_map': [{'Multi_relation': '文档结构关系', 'begin_prop': '', 'end_prop': '', 'edge_prop': ['', '']}]}, {'relation_info': {'begin_name': 'folder', 'edge_name': 'folder2folder', 'end_name': 'folder', 'entity_type': 'folder2folder', 'key_property': 'name'}, 'property_map': [{'edge_prop': 'name', 'entity_prop': 'name'}], 'relation_map': [{'Multi_relation': '文档结构关系', 'begin_prop': '', 'end_prop': '', 'edge_prop': ['', '']}]}, {'relation_info': {'begin_name': 'folder', 'edge_name': 'folder2document', 'end_name': 'document', 'entity_type': 'folder2document', 'key_property': 'name'}, 'property_map': [{'edge_prop': 'name', 'entity_prop': 'name'}], 'relation_map': [{'Multi_relation': '文档结构关系', 'begin_prop': '', 'end_prop': '', 'edge_prop': ['', '']}]}, {'relation_info': {'begin_name': 'document', 'edge_name': 'document2chapter', 'end_name': 'chapter', 'entity_type': 'document2chapter', 'key_property': 'name'}, 'property_map': [{'edge_prop': 'name', 'entity_prop': 'name'}], 'relation_map': [{'Multi_relation': '文档结构关系', 'begin_prop': '', 'end_prop': '', 'edge_prop': ['', '']}]}, {'relation_info': {'begin_name': 'document', 'edge_name': 'document2text', 'end_name': 'text', 'entity_type': 'document2text', 'key_property': 'name'}, 'property_map': [{'edge_prop': 'name', 'entity_prop': 'name'}], 'relation_map': [{'Multi_relation': '文档结构关系', 'begin_prop': '', 'end_prop': '', 'edge_prop': ['', '']}]}, {'relation_info': {'begin_name': 'text', 'edge_name': 'text2text', 'end_name': 'text', 'entity_type': 'text2text', 'key_property': 'name'}, 'property_map': [{'edge_prop': 'name', 'entity_prop': 'name'}], 'relation_map': [{'Multi_relation': '文档结构关系', 'begin_prop': '', 'end_prop': '', 'edge_prop': ['', '']}]}, {'relation_info': {'begin_name': 'chapter', 'edge_name': 'chapter2text', 'end_name': 'text', 'entity_type': 'chapter2text', 'key_property': 'name'}, 'property_map': [{'edge_prop': 'name', 'entity_prop': 'name'}], 'relation_map': [{'Multi_relation': '文档结构关系', 'begin_prop': '', 'end_prop': '', 'edge_prop': ['', '']}]}, {'relation_info': {'begin_name': 'label', 'edge_name': 'label2label', 'end_name': 'label', 'entity_type': 'label2label', 'key_property': 'name'}, 'property_map': [{'edge_prop': 'name', 'entity_prop': 'name'}, {'edge_prop': 'weight', 'entity_prop': 'weight'}], 'relation_map': [{'Multi_relation': '文档结构关系', 'begin_prop': '', 'end_prop': '', 'edge_prop': ['', '']}]}, {'relation_info': {'begin_name': 'label', 'edge_name': 'label2document', 'end_name': 'document', 'entity_type': 'label2document', 'key_property': 'name'}, 'property_map': [{'edge_prop': 'name', 'entity_prop': 'name'}, {'edge_prop': 'weight', 'entity_prop': 'weight'}], 'relation_map': [{'Multi_relation': '文档结构关系', 'begin_prop': '', 'end_prop': '', 'edge_prop': ['', '']}]}]}]",
             "[{'status': True, 'entity_classes': [{'name': 'folder', 'properties': [{'property': 'gns', 'function': 'equality'}]}, {'name': 'document', 'properties': [{'property': 'gns', 'function': 'equality'}]}, {'name': 'chapter', 'properties': [{'property': 'name', 'function': 'equality'}, {'property': 'path', 'function': 'equality'}, {'property': 'level', 'function': 'equality'}]}, {'name': 'text', 'properties': [{'property': 'name', 'function': 'equality'}]}, {'name': 'label', 'properties': [{'property': 'name', 'function': 'equality'}, {'property': 'adlabel_kcid', 'function': 'equality'}]}, {'name': 'desc', 'properties': [{'property': 'name', 'function': 'equality'}]}]}]"]
        ]
        self.graph_config_table_empty = []
        self.graph_config_columns = ['id', 'update_time', 'graph_name', 'graph_status', 'graph_baseInfo',
                                     'graph_ds', 'graph_otl', 'graph_otl_temp', 'graph_InfoExt', 'graph_KMap',
                                     'graph_KMerge']
        self.getGraphDBNew = [
            [1, '1.2.3.4', '2480', 'admin22', 'admin22', 3, 'orientdb', 'root', 'YW55ZGF0YTEyMw==', 2424, "test", "", ""]]
        self.getGraphDBNew_columns = ['id', 'ip', 'port', 'user', 'password', 'version', 'type', 'db_user', 'db_ps',
                                      'db_port', "name", "cteated", "updated"]
        res = pd.DataFrame(self.graph_config_table_empty, columns=self.graph_config_columns)
        graph_dao.getKgConfByName = mock.Mock(return_value=res)
        # mock getGraphDBNew
        res = pd.DataFrame(self.getGraphDBNew, columns=self.getGraphDBNew_columns)
        graph_dao.getGraphDBNew = mock.Mock(return_value=res)
        # mock getKgConfLastId
        columns = ['id']
        getKgConfLastId = [[124]]
        res = pd.DataFrame(getKgConfLastId, columns=columns)
        graph_dao.getKgConfLastId = mock.Mock(return_value=res)
        # mock getallgraph
        res = pd.DataFrame(self.graph_config_table_empty, columns=self.graph_config_columns)
        graph_dao.getallgraph = mock.Mock(return_value=res)
        # mock insertData
        graph_dao.insertData = mock.Mock(return_value=125)
        # mock insertgraph
        graph_dao.insertgraph = mock.Mock(return_value=122)
        self.params_json = {"graph_step": "graph_baseInfo",
                            "graph_process": [
                                {"graph_Name": "qwe", "graph_des": "", "graph_DBName": "qwe", "graph_db_id": 1}],
                            "knw_id": 1}

        self.host_url = '1.2.3.4'
        self.listDatabases = []
        graph_Service.get_listDatabases = mock.Mock(return_value=self.listDatabases)
        self.mongoDB_db_names = ['test_gjk']
        graph_Service.get_listMongo = mock.Mock(return_value=self.mongoDB_db_names)
        graph_Service.test_avaible_db = mock.Mock(return_value=True)

    def test_addgraph_sucess(self):
        # mock getKgConfByName
        ret_code, ret_message, graph_id = graph_Service.addgraph(self.params_json, self.host_url)
        self.assertEqual(ret_code, 200)

    def test_addgraph_fail(self):
        # 还原
        self.listDatabases = []
        graph_Service.get_listDatabases = mock.Mock(return_value=self.listDatabases)
        # mock getKgConfByName
        res = pd.DataFrame(self.graph_config_table, columns=self.graph_config_columns)
        graph_dao.getKgConfByName = mock.Mock(return_value=res)
        ret_code, ret_message, graph_id = graph_Service.addgraph(self.params_json, self.host_url)
        self.assertEqual(ret_code, 500)
        res = pd.DataFrame(self.graph_config_table, columns=self.graph_config_columns)
        graph_dao.getallgraph = mock.Mock(return_value=res)
        ret_code, ret_message, graph_id = graph_Service.addgraph(self.params_json, self.host_url)
        self.assertEqual(ret_code, 500)

    def test_addgraph_exception(self):
        graph_Service.get_listMongo = mock.Mock(return_value=[], side_effect=Exception('mongoDB Unusable!'))
        ret_code, ret_message, graph_id = graph_Service.addgraph(self.params_json, self.host_url)
        self.assertEqual(ret_message['code'], 500001)
        self.getGraphDBNew = []
        res = pd.DataFrame(self.getGraphDBNew, columns=self.getGraphDBNew_columns)
        graph_dao.getGraphDBNew = mock.Mock(return_value=res)
        ret_code, ret_message, graph_id = graph_Service.addgraph(self.params_json, self.host_url)
        self.assertEqual(ret_message['code'], 500007)
        res = pd.DataFrame(self.graph_config_table, columns=self.graph_config_columns)
        graph_dao.getKgConfByName = mock.Mock(return_value=res)
        ret_code, ret_message, graph_id = graph_Service.addgraph(self.params_json, self.host_url)
        self.assertEqual(ret_message['code'], 500008)


if __name__ == '__main__':
    suite1 = unittest.TestLoader().loadTestsFromTestCase(AddgraphTest)
    suite = unittest.TestSuite([suite1])
    unittest.TextTestRunner(verbosity=1).run(suite)
