definitions:
  controllers.AddSearchConfRes:
    properties:
      res:
        type: integer
    type: object
  controllers.AdvConf:
    properties:
      conf_id:
        type: integer
      conf_name:
        type: string
    type: object
  controllers.AdvConfKG:
    properties:
      adv_conf:
        description: |-
          KGDesc  string    `json:"kg_desc"`
          ASModel bool      `json:"as_model"`
        items:
          $ref: '#/definitions/controllers.AdvConf'
        type: array
      kg_id:
        type: integer
      kg_name:
        type: string
      property_id:
        type: integer
    type: object
  controllers.AdvConfKGList:
    properties:
      config_status:
        type: string
      kg_id:
        type: integer
      kg_name:
        type: string
      status:
        type: string
      task_status:
        type: string
      update_time:
        type: string
    type: object
  controllers.AdvConfKGListRes:
    properties:
      res:
        items:
          $ref: '#/definitions/controllers.AdvConfKGList'
        type: array
    type: object
  controllers.AnaRes:
    properties:
      content:
        items:
          type: string
        type: array
      entity:
        items:
          $ref: '#/definitions/controllers.VPosition'
        type: array
      name:
        type: string
    type: object
  controllers.AnalysisRes:
    properties:
      res:
        $ref: '#/definitions/controllers.AnaRes'
    type: object
  controllers.DelSearchConfRes:
    properties:
      res:
        type: string
    type: object
  controllers.EdgeProperties:
    properties:
      name:
        type: string
      type:
        type: string
      value:
        type: string
    type: object
  controllers.ExpandProperty:
    properties:
      "n":
        type: string
      v:
        type: string
    type: object
  controllers.ExpandVEdgeRes:
    properties:
      alias:
        type: string
      class:
        type: string
      color:
        type: string
      id:
        type: string
      name:
        type: string
      properties:
        items:
          $ref: '#/definitions/controllers.ExpandProperty'
        type: array
    type: object
  controllers.ExpandVertexRes:
    properties:
      alias:
        type: string
      analysis:
        type: boolean
      class:
        type: string
      color:
        type: string
      expand:
        type: boolean
      id:
        type: string
      in_e:
        items:
          $ref: '#/definitions/controllers.ExpandVEdgeRes'
        type: array
      name:
        type: string
      out_e:
        items:
          $ref: '#/definitions/controllers.ExpandVEdgeRes'
        type: array
      properties:
        items:
          $ref: '#/definitions/controllers.ExpandProperty'
        type: array
    type: object
  controllers.GetConfByKGName:
    properties:
      adv_conf:
        items:
          $ref: '#/definitions/dao.ConfListByKgid'
        type: array
      as_model:
        type: boolean
      kg_desc:
        type: string
      kg_id:
        type: integer
      kg_name:
        type: string
    type: object
  controllers.GetConfByKGNameRes:
    properties:
      res:
        items:
          $ref: '#/definitions/controllers.GetConfByKGName'
        type: array
    type: object
  controllers.GetPropertiesRes:
    properties:
      res:
        items:
          $ref: '#/definitions/controllers.Properties'
        type: array
    type: object
  controllers.GetSearchConfRes:
    properties:
      count:
        type: integer
      res:
        items:
          $ref: '#/definitions/controllers.AdvConfKG'
        type: array
    type: object
  controllers.InfoSearchConfRes:
    properties:
      res:
        $ref: '#/definitions/dao.InfoSearchConf'
    type: object
  controllers.Properties:
    properties:
      p_name:
        type: string
      p_type:
        type: string
    type: object
  controllers.Relation:
    properties:
      res:
        items:
          $ref: '#/definitions/controllers.RelationEdges'
        type: array
    type: object
  controllers.RelationEdges:
    properties:
      alias:
        type: string
      class:
        type: string
      color:
        type: string
      in:
        type: string
      name:
        type: string
      out:
        type: string
      properties:
        items:
          $ref: '#/definitions/controllers.EdgeProperties'
        type: array
      rid:
        type: string
    type: object
  controllers.SearchSQLRes:
    properties:
      res: {}
      time:
        type: string
    type: object
  controllers.UpdateSearchConfRes:
    properties:
      res:
        type: string
    type: object
  controllers.VPosition:
    properties:
      before_word:
        description: "Color string\t`json:\"color\"`"
        type: string
      end_index:
        type: integer
      line_index:
        type: integer
      repeat_freq:
        type: integer
      selected_index:
        type: integer
      start_index:
        type: integer
      unique_mark:
        type: integer
      v_alias:
        type: string
      v_class:
        type: string
      v_color:
        type: string
      v_proper:
        type: string
      word_name:
        type: string
    type: object
  dao.ConfContent:
    properties:
      display_range:
        $ref: '#/definitions/dao.DisplayRange'
      max_depth:
        type: integer
      search_range:
        $ref: '#/definitions/dao.SearchRange'
    required:
    - display_range
    - search_range
    type: object
  dao.ConfListByKgid:
    properties:
      conf_desc:
        type: string
      conf_id:
        type: integer
      conf_name:
        type: string
      type:
        type: string
      update_time:
        type: string
    type: object
  dao.DisplayRange:
    properties:
      vertexes:
        $ref: '#/definitions/dao.RangeVertexes'
    required:
    - vertexes
    type: object
  dao.InfoSearchConf:
    properties:
      conf_content:
        $ref: '#/definitions/dao.ConfContent'
      conf_desc:
        type: string
      conf_id:
        type: integer
      conf_name:
        type: string
      kg_id:
        type: integer
      kg_name:
        type: string
      type:
        type: string
    type: object
  dao.RangeEdges:
    properties:
      open:
        items:
          type: string
        type: array
    type: object
  dao.RangeVertexes:
    properties:
      open:
        items:
          type: string
        type: array
    type: object
  dao.SearchRange:
    properties:
      edges:
        $ref: '#/definitions/dao.RangeEdges'
      vertexes:
        $ref: '#/definitions/dao.RangeVertexes'
    required:
    - edges
    - vertexes
    type: object
  gql.DataQuery:
    type: object
  orient.EdgeSimpleInfo:
    properties:
      id:
        type: string
      in:
        type: string
      out:
        type: string
    type: object
  orient.ExplorePathEdgeRes:
    properties:
      alias:
        type: string
      class:
        type: string
      color:
        type: string
      id:
        type: string
      in:
        type: string
      name:
        type: string
      out:
        type: string
      properties:
        items:
          $ref: '#/definitions/orient.ExplorePathProperty'
        type: array
    type: object
  orient.ExplorePathProperty:
    properties:
      "n":
        type: string
      v:
        type: string
    type: object
  orient.ExplorePathVertexRes:
    properties:
      alias:
        type: string
      analysis:
        type: boolean
      class:
        type: string
      color:
        type: string
      expand:
        type: boolean
      id:
        type: string
      name:
        type: string
      properties:
        items:
          $ref: '#/definitions/orient.ExplorePathProperty'
        type: array
    type: object
  orient.PathDetailInfo:
    properties:
      edges:
        items:
          $ref: '#/definitions/orient.ExplorePathEdgeRes'
        type: array
      vertices:
        items:
          $ref: '#/definitions/orient.ExplorePathVertexRes'
        type: array
    type: object
  orient.PathInfo:
    properties:
      edges:
        items:
          $ref: '#/definitions/orient.EdgeSimpleInfo'
        type: array
      vertices:
        items:
          type: string
        type: array
    type: object
  services.AddAdvSearchConf:
    properties:
      conf_content:
        $ref: '#/definitions/dao.ConfContent'
      conf_desc:
        maxLength: 150
        type: string
      conf_name:
        maxLength: 50
        type: string
      kg_id:
        type: integer
      type:
        type: string
    required:
    - conf_content
    - conf_name
    - kg_id
    type: object
  services.ConfContent:
    properties:
      display_range:
        $ref: '#/definitions/services.DisplayRange'
      max_depth:
        type: integer
      search_range:
        $ref: '#/definitions/services.SearchRange'
    type: object
  services.DelAdvSearchConf:
    properties:
      conf_ids:
        items:
          type: integer
        minItems: 1
        type: array
    required:
    - conf_ids
    type: object
  services.Dict:
    type: object
  services.DisplayRange:
    properties:
      vertexes:
        $ref: '#/definitions/services.Vertexes'
    type: object
  services.Edge:
    properties:
      color:
        type: string
      from_id:
        type: string
      name:
        type: string
      tag:
        type: string
      to_id:
        type: string
    type: object
  services.Edges:
    properties:
      open:
        items:
          type: string
        type: array
    type: object
  services.ExplorePathBody:
    properties:
      direction:
        enum:
        - positive
        - reverse
        - bidirect
        type: string
      endRid:
        type: string
      id:
        type: string
      shortest:
        enum:
        - 0
        - 1
        type: integer
      startRid:
        type: string
    required:
    - endRid
    - id
    - startRid
    type: object
  services.Path:
    properties:
      edges:
        items:
          $ref: '#/definitions/services.Edge'
        type: array
      meta_data:
        items:
          $ref: '#/definitions/services.PathMetaData'
        type: array
      vertexes:
        items:
          $ref: '#/definitions/services.Vertex'
        type: array
    type: object
  services.PathBody:
    properties:
      id:
        type: string
      paths:
        items:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        type: array
    required:
    - id
    - paths
    type: object
  services.PathDetailRes:
    properties:
      res:
        items:
          $ref: '#/definitions/orient.PathDetailInfo'
        type: array
    type: object
  services.PathMetaData:
    properties:
      depth:
        type: integer
      from_entity_score:
        type: number
      weight:
        type: number
    type: object
  services.PathRes:
    properties:
      res:
        items:
          $ref: '#/definitions/orient.PathInfo'
        type: array
    type: object
  services.ReqBody:
    properties:
      id:
        type: string
      mode:
        description: 允许为空或者graph
        enum:
        - graph
        type: string
      sql:
        items:
          type: string
        type: array
      transaction:
        description: 是否执行事务
        type: boolean
    required:
    - sql
    type: object
  services.ReqExploreRelationArgs:
    properties:
      id:
        type: integer
      rids:
        items:
          type: string
        type: array
    required:
    - id
    - rids
    type: object
  services.ReqPropertiesArgs:
    properties:
      class:
        type: string
      id:
        type: integer
    required:
    - class
    - id
    type: object
  services.RequestModel:
    properties:
      conf_content:
        $ref: '#/definitions/services.ConfContent'
      kg_ids:
        type: string
      page:
        type: integer
      query:
        type: string
      size:
        type: integer
    type: object
  services.Response:
    properties:
      number:
        type: integer
      res:
        $ref: '#/definitions/services.SearchResult'
      time:
        type: number
    type: object
  services.SearchRange:
    properties:
      edges:
        $ref: '#/definitions/services.Edges'
      vertexes:
        $ref: '#/definitions/services.Vertexes'
    type: object
  services.SearchResult:
    properties:
      search:
        items:
          $ref: '#/definitions/services.TargetVertex'
        type: array
    type: object
  services.TargetVertex:
    properties:
      analysis:
        type: boolean
      color:
        type: string
      id:
        type: string
      name:
        type: string
      properties:
        $ref: '#/definitions/services.Dict'
      score:
        type: number
      search_path:
        $ref: '#/definitions/services.Path'
      tag:
        type: string
    type: object
  services.UpdateAdvSearchConf:
    properties:
      conf_content:
        $ref: '#/definitions/dao.ConfContent'
      conf_desc:
        maxLength: 150
        type: string
      conf_id:
        type: integer
      conf_name:
        maxLength: 50
        type: string
    required:
    - conf_content
    - conf_id
    - conf_name
    type: object
  services.Vertex:
    properties:
      color:
        type: string
      id:
        type: string
      name:
        type: string
      tag:
        type: string
    type: object
  services.Vertexes:
    properties:
      open:
        items:
          type: string
        type: array
    type: object
  utils.Error:
    properties:
      description:
        type: string
      error: {}
      errorCode:
        type: string
      errorDetails:
        items:
          additionalProperties:
            type: string
          type: object
        type: array
      errorLink:
        type: string
      solution:
        type: string
    type: object
info:
  contact: {}
  description: KWeaver graph-engine and alg-server
  license:
    name: Apache 2.0
  title: kw_engine
  version: 1.0.0
paths:
  /api/engine/v1/adv-search-config:
    delete:
      consumes:
      - application/json
      description: delete adv-search configs
      parameters:
      - description: config ids
        in: body
        name: conf_ids
        required: true
        schema:
          $ref: '#/definitions/services.DelAdvSearchConf'
      produces:
      - application/json
      responses:
        "200":
          description: result string
          schema:
            $ref: '#/definitions/controllers.DelSearchConfRes'
        "400":
          description: 'EngineServer.ErrArgsErr: Parameter exception'
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: 'EngineServer.ErrAdvSearchConfIDErr: config ID does not exist'
          schema:
            $ref: '#/definitions/utils.Error'
      summary: delete configs
      tags:
      - CEngine
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: get adv-search configs
      parameters:
      - description: knowledge network id
        in: query
        name: knowledge_network_id
        required: true
        type: integer
      - description: '''all'' or config or kg name'
        in: query
        name: filter
        required: true
        type: string
      - description: query keyword
        in: query
        name: query
        type: string
      - description: Number of pages
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - description: Number of edges
        in: query
        minimum: 1
        name: size
        required: true
        type: integer
      - description: sort type
        enum:
        - descend
        - ascend
        in: query
        name: sort
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: result string
          schema:
            $ref: '#/definitions/controllers.GetSearchConfRes'
        "400":
          description: 'EngineServer.ErrArgsErr: Parameter exception'
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: 'EngineServer.ErrInternalErr: internal error'
          schema:
            $ref: '#/definitions/utils.Error'
      summary: get configs
      tags:
      - CEngine
    post:
      consumes:
      - application/json
      description: add adv-search configs
      parameters:
      - description: config content
        in: body
        name: conf_content
        required: true
        schema:
          $ref: '#/definitions/services.AddAdvSearchConf'
      produces:
      - application/json
      responses:
        "200":
          description: result string
          schema:
            $ref: '#/definitions/controllers.AddSearchConfRes'
        "400":
          description: 'EngineServer.ErrArgsErr: Parameter exception'
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: 'EngineServer.ErrAdvConfContentErr: content error'
          schema:
            $ref: '#/definitions/utils.Error'
      summary: add configs
      tags:
      - CEngine
  /api/engine/v1/adv-search-config/conf/{kgid}:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: add adv-search configs by knowledge graph id
      parameters:
      - description: knowledge graph id
        in: path
        name: kgid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: result string
          schema:
            $ref: '#/definitions/controllers.GetConfByKGNameRes'
        "500":
          description: 'EngineServer.ErrKGIDErr: knowledge graph ID does not exist'
          schema:
            $ref: '#/definitions/utils.Error'
      summary: get config ids
      tags:
      - CEngine
  /api/engine/v1/adv-search-config/info/{confid}:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: get adv-search config info by id
      parameters:
      - description: config id
        in: path
        name: confid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: result string
          schema:
            $ref: '#/definitions/controllers.InfoSearchConfRes'
        "400":
          description: 'EngineServer.ErrArgsErr: Parameter exception'
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: 'EngineServer.ErrAdvSearchConfIDErr: config ID does not exist'
          schema:
            $ref: '#/definitions/utils.Error'
      summary: get config info
      tags:
      - CEngine
  /api/engine/v1/adv-search-config/kglist:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: get knowledge graph list
      parameters:
      - description: knowledge network id
        in: query
        name: knowledge_network_id
        required: true
        type: string
      - description: knowledge network name
        in: query
        name: knowledge_network_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: result string
          schema:
            $ref: '#/definitions/controllers.AdvConfKGListRes'
        "500":
          description: 'EngineServer.ErrInternalErr: internal error'
          schema:
            $ref: '#/definitions/utils.Error'
      summary: get kglist
      tags:
      - CEngine
  /api/engine/v1/adv-search-config/update:
    post:
      consumes:
      - application/json
      description: update adv-search configs
      parameters:
      - description: config content
        in: body
        name: conf_content
        required: true
        schema:
          $ref: '#/definitions/services.UpdateAdvSearchConf'
      produces:
      - application/json
      responses:
        "200":
          description: result string
          schema:
            $ref: '#/definitions/controllers.UpdateSearchConfRes'
        "400":
          description: 'EngineServer.ErrArgsErr: Parameter exception'
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: 'EngineServer.ErrAdvConfContentErr: content error'
          schema:
            $ref: '#/definitions/utils.Error'
      summary: update configs
      tags:
      - CEngine
  /api/engine/v1/adv-search/{confid}:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: semantic search
      parameters:
      - description: config ids like'5,6,7'
        in: path
        name: confid
        required: true
        type: string
      - description: Query statement
        in: query
        name: query
        type: string
      - description: number of pages
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - description: Number of pages displayed
        in: query
        minimum: 1
        name: size
        required: true
        type: integer
      - description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: result string
          schema:
            $ref: '#/definitions/services.Response'
        "400":
          description: 'EngineServer.ErrArgsErr: Parameter exception'
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: 'EngineServer.ErrOrientDBErr: OrientDB error'
          schema:
            $ref: '#/definitions/utils.Error'
      summary: advanced search
      tags:
      - CEngine
  /api/engine/v1/adv-search/test:
    get:
      consumes:
      - application/json
      description: semantic search test
      parameters:
      - description: adv-search query
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.RequestModel'
      produces:
      - application/json
      responses:
        "200":
          description: result string
          schema:
            $ref: '#/definitions/services.Response'
        "400":
          description: 'EngineServer.ErrArgsErr: Parameter exception'
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: 'EngineServer.ErrOrientDBErr: OrientDB error'
          schema:
            $ref: '#/definitions/utils.Error'
      summary: advanced search test
      tags:
      - CEngine
  /api/engine/v1/analysis:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: Document analysis report
      parameters:
      - description: knowledge graph id
        in: query
        name: id
        required: true
        type: integer
      - description: entity id
        in: query
        name: rid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: result string
          schema:
            $ref: '#/definitions/controllers.AnalysisRes'
        "400":
          description: 'EngineServer.ErrArgsErr: Parameter exception'
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: 'EngineServer.ErrOrientDBErr: OrientDB error'
          schema:
            $ref: '#/definitions/utils.Error'
      summary: Document analysis report
      tags:
      - CEngine
  /api/engine/v1/explore/:
    post:
      consumes:
      - application/json
      description: graphql search
      parameters:
      - description: graphql search statement
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/gql.DataQuery'
      produces:
      - application/json
      responses:
        "200":
          description: result string
          schema:
            $ref: '#/definitions/gql.DataQuery'
        "400":
          description: 'EngineServer.ErrArgsErr: Parameter exception'
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: 'EngineServer.ErrConfigStatusErr: graph in configuration status'
          schema:
            $ref: '#/definitions/utils.Error'
      summary: graphql search
      tags:
      - CEngine
  /api/engine/v1/explore/expandv:
    get:
      consumes:
      - application/x-www-form-urlencoded
      description: expand edges by entity id
      parameters:
      - description: Edge class, when null, query all edges
        in: query
        name: class
        type: string
      - description: Number of pages
        in: query
        minimum: 1
        name: page
        required: true
        type: integer
      - description: Number of edges, query all when page = -1
        in: query
        minimum: -1
        name: size
        required: true
        type: integer
      - description: The direction of the expanded edge
        enum:
        - in
        - out
        - inout
        in: query
        name: io
        required: true
        type: string
      - description: entity id
        in: query
        name: rid
        required: true
        type: string
      - description: graph id
        in: query
        name: id
        required: true
        type: string
      - description: entity name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: result string
          schema:
            $ref: '#/definitions/controllers.ExpandVertexRes'
        "400":
          description: 'EngineServer.ErrArgsErr: Parameter exception'
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: 'EngineServer.ErrOrientDBErr: OrientDB error'
          schema:
            $ref: '#/definitions/utils.Error'
      summary: expand vertexes
      tags:
      - CEngine
  /api/engine/v1/explore/path:
    post:
      consumes:
      - application/json
      description: explore the path between two vertices
      parameters:
      - description: explore path body, direction[positive, reverse, bidirect], shortest[0(all),
          1(shortest)]
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.ExplorePathBody'
      produces:
      - application/json
      responses:
        "200":
          description: result string
          schema:
            $ref: '#/definitions/services.PathRes'
        "400":
          description: 'EngineServer.ErrArgsErr: Parameter exception'
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: 'EngineServer.ErrInternalErr: internal error'
          schema:
            $ref: '#/definitions/utils.Error'
      summary: explore the path
      tags:
      - CEngine
  /api/engine/v1/explore/pathDetail:
    post:
      consumes:
      - application/json
      description: query path details by paths list
      parameters:
      - description: knowledge graph id and paths list
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.PathBody'
      produces:
      - application/json
      responses:
        "200":
          description: result string
          schema:
            $ref: '#/definitions/services.PathDetailRes'
        "400":
          description: 'EngineServer.ErrArgsErr: Parameter exception'
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: 'EngineServer.ErrInternalErr: internal error'
          schema:
            $ref: '#/definitions/utils.Error'
      summary: query path details
      tags:
      - CEngine
  /api/engine/v1/explore/relation:
    post:
      consumes:
      - application/json
      description: Get the direct relationship between two entities
      parameters:
      - description: knowledge graph id and entity IDs
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.ReqExploreRelationArgs'
      produces:
      - application/json
      responses:
        "200":
          description: result string
          schema:
            $ref: '#/definitions/controllers.Relation'
        "400":
          description: 'EngineServer.ErrArgsErr: Parameter exception'
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: 'EngineServer.ErrOrientDBErr: OrientDB error'
          schema:
            $ref: '#/definitions/utils.Error'
      summary: Get relationship
      tags:
      - CEngine
  /api/engine/v1/health/alive:
    get:
      description: Health detection
      responses:
        "200":
          description: OK
      summary: alive
      tags:
      - CEngine
  /api/engine/v1/health/ready:
    get:
      description: Health detection
      responses:
        "200":
          description: OK
      summary: ready
      tags:
      - CEngine
  /api/engine/v1/kg/:
    post:
      consumes:
      - application/json
      description: graphql search
      produces:
      - application/json
      responses:
        "200":
          description: result data
          schema:
            type: json
        "500":
          description: 'EngineServer.ErrResourceErr: did not find configuration file '
          schema:
            $ref: '#/definitions/utils.Error'
      summary: graphql search
      tags:
      - CEngine
  /api/engine/v1/properties:
    post:
      consumes:
      - application/json
      description: Get attributes and types, for configuring search filter
      parameters:
      - description: class id and name
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.ReqPropertiesArgs'
      produces:
      - application/json
      responses:
        "200":
          description: result string
          schema:
            $ref: '#/definitions/controllers.GetPropertiesRes'
        "400":
          description: 'EngineServer.ErrArgsErr: Parameter exception'
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: 'EngineServer.ErrOrientDBErr: OrientDB error'
          schema:
            $ref: '#/definitions/utils.Error'
      summary: attributes and types
      tags:
      - CEngine
  /api/engine/v1/sql/{id}:
    post:
      consumes:
      - application/json
      description: Orientdb sql API
      parameters:
      - description: sql id
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/services.ReqBody'
      produces:
      - application/json
      responses:
        "200":
          description: result string
          schema:
            $ref: '#/definitions/controllers.SearchSQLRes'
        "400":
          description: 'EngineServer.ErrArgsErr: Parameter exception'
          schema:
            $ref: '#/definitions/utils.Error'
        "500":
          description: 'EngineServer.ErrOrientDBErr: OrientDB error'
          schema:
            $ref: '#/definitions/utils.Error'
      summary: Orientdb sql API
      tags:
      - CEngine
swagger: "2.0"
