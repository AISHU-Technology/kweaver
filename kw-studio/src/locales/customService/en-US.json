{
  "customService": {
    "exit": "退出",
    "createService": "Create Application",
    "editService": "Edit Application",
    "env": "Deployment Environment",
    "basicEnv": "Basic Environment",
    "depEnv1": "Deployment Environment1",
    "depEnv2": "Deployment Environment2",
    "envDes1": "1. Different environments contain different knowledge components and dependency packages required for component operation",
    "envDes2": "2. The built-in knowledge components and dependency packages of the basic environment cannot be modified",
    "envDes3": "3. Environment 1 and Environment 2 can be managed using KWeaver tools",
    "duplicate": " Copy",
    "jsonFile": "JSON Files Configuration and Testing",
    "publish": "Publishing",
    "actuator": "Executors",
    "knowledgeComponents": "Knowledge Components",
    "test": "Test",
    "view": "View Executors",
    "input": "Type JSON to test",
    "configuration": "JSON Configuration File",
    "reRun": "The file configured with JSON has been changed, you should re-run the configuration to test it",
    "runConfig": "Run Config",
    "template": "Introduce Templates",
    "copy": "Copy",
    "parameter": "INPUT Parameters Description",
    "click": "1. View the templates and executors on the right for JSON configuration",
    "name": "Name",
    "type": "Type",
    "clickTest": "2. After the configuration, click [Run Config] button on the top right",
    "outPut": "OUTPUT Parameters Description",
    "props": "PROPS Parameters Description",
    "add": "Add",
    "selectKnCs": "Please select a knowledge component to view more",
    "selectTemps": "Please select a template to view more",
    "emptyDes": "No description",
    "customTitle": "Customised Apps",
    "create": "Create",
    "templateTwo": "Template",
    "state": "State",
    "all": "all",
    "unpublished": "unpublished",
    "publishing": "publishing",
    "fail": "publish failed",
    "published": "published",
    "cancelPublished": "unpublishing",
    "serviceName": "Application Name",
    "inputServiceName": "Please Input Application Name",
    "stateTable": "State",
    "description": "Description",
    "document": "Document Description",
    "ID": "Application ID",
    "associate": "Associated Graphs Number",
    "creator": "Creator",
    "createTime": "Created Time",
    "final": "Final Operator",
    "finalTime": "Final Operated Time",
    "operations": "Operations",
    "noService": "Click |[Create]| button to add application",
    "noDescription": "[No description]",
    "details": "Details",
    "graphs": "graphs",
    "editTable": "Edit",
    "testTable": "Test",
    "publishTable": "Publish",
    "moreTable": "More",
    "copyTable": "Copy",
    "exportTable": "Export",
    "deleteTable": "Delete",
    "permission": "Permissions",
    "customPermission": "Customised Cognitive Application Permission Management",
    "associateGraph": "Associated Resources",
    "associated": "{graph} graphs associated",
    "unPublishTip": "Are you sure to  unpublish the application?",
    "tipContent": "You need to re-publish it if you choose to unpublish it now. Please exercise caution when performing this operation!",
    "cancelModal": "Cancel",
    "ok": "OK",
    "deleteTip": "Are you sure to delete the application?",
    "caution": "Once the application is deleted, it cannot be retrieved. Please exercise caution when performing this operation!",
    "failTo": "Failed to delete it",
    "domain": "The current knowledge graph is configured with domain cognitive services, you need to delete all related services before you can delete it.",
    "noPermission": "No knowledge graph permissions",
    "currently": "You currently do not have the permission of the knowledge graph",
    "jsonNotEmpty": "JSON cannot be null",
    "runConfigTest": "Please complete the JSON file configuration first, and then click [Run Config] on the top right to test it",
    "searchName": "Search for application name/ID",
    "contentError": "Incorrect format, please check your file",
    "executorIntroduce": "Executor Introduction",
    "templateIntroduce": "Template Introduction",
    "knowComponentIntroduce": "Knowledge Component Introduction",
    "addConfig": "Add to configuration file",
    "graphFullTextSearchExecutor": {
      "description": "Based on the constructed knowledge graph, according to the user query and related configurations (in which graphs to search, in which entities to search), search in the entity OpenSearch index to get the entity id, get all the corresponding attribute information from Nebula, and return the entity-attribute result list.",
      "query": "Query statement",
      "cat": "Data source category",
      "page": "Search for the page number of the results returned",
      "size": "Search for the page of the returned results, and the number of each page returned",
      "kg_list": "Graphs list which the users have access",
      "count": "Total number of results queried",
      "entities": "Results queried"
    },
    "graphQAExecutor": {
      "description": "Based on the constructed knowledge graph, answer user questions based on query and configuration (graph entity range, entity name attribute and synonym attribute). Identify exact match entities through opensearch, recall entity related paths that are most similar to the query, or identify intent and related graph analysis application, and then return graph analysis results. The results contain text and subgraphs. Text can be organized either by default mode or by openai.",
      "query": "User query",
      "kg_list": "Graphs list which the users have access",
      "answers": "Results queried",
      "openai_auth_error": "Whether the OPENAI configuration is invalid, -1: unknown, 0: not invalid, 1: invalid",
      "graph_schema_and_synonyms": "Configure the schema and name attributes of the graph for LLMAnsOrgExecutor"
    },
    "entityLinkingExecutor": {
      "description": "To identify entities in the query by opensearch based on the configured entity type weights. Only one entity is returned.",
      "query": "User query",
      "kg_list": "Graphs list which the users have access",
      "vertices": "Entities list, if there is a value, return it directly.",
      "graph_qa_answer_list": "Graph QA results list, if there are results, the first entity will be returned",
      "outVertices": "Entities list, each entity is a dict"
    },
    "knowledgeCardExecutor": {
      "description": "With the entity vid, query in the nebula the information of entity itself and related entities, the components list is returned, and each component contains style information and a list of related entities according to rules configured.",
      "vertices": "Enter start entity information",
      "knowledge_card": "Knowledge card information returned"
    },
    "relatedKnowledgeExecutor": {
      "description": "With the entity vid, query in the nebula the information of entity itself and related entities, the components list is returned, and each component contains style information and a list of related entities according to rules configured.",
      "vertices": "Enter start entity information",
      "related_knowledge": "Knowledge card information returned"
    },
    "intentRecognitionExecutor": {
      "description": "Model-based intent recognition and entity extracting is performed on the input query, using the trained model to parse the query text and return a list of intent categories and entities.",
      "query": "User query",
      "answers": "The intent results returned contain the model predicted intent, a list of entities extracted from the query language, and the score ordering"
    },
    "graphSynSearchExecutor": {
      "description": "To recognize the entities based on the same lexicon via query statement, and configure the graph analysis application related to entity classes, so that achieve the return of the entities in graph analysis.",
      "query": "User query",
      "limit": "Number limit of results returned",
      "count": "Number of results returned",
      "entities": "Entity information list",
      "answer": "Text results",
      "subgraphs": "Subgraphs related to entities list",
      "stopwords": "Words that don't need to be searched in query",
      "stop_entities": "The starting entity class type that don't need to be searched",
      "filter": "Filters",
      "query_cuts": "Tokenization results, including synonyms and stop words"
    },
    "intentionGASLinkingExecutor": {
      "description": "Maps the user input query to a graph analysis service that corresponds to the intent to be searched, and returns the subgraph of search results",
      "query": "User query",
      "subgraph": "Subgraph of search results"
    },
    "LLMAnsOrgExecutor": {
      "description": "For the input query and subgraph, combined with the QA output of the graph, the large model is requested to organize the subgraph answers.",
      "query": "User query",
      "subgraph": "Subgraph data",
      "graph_schema_and_synonyms": "Graph schema and attribute name configuration information output by GraphQA",
      "graph_qa_ans": "Graph QA output answer list",
      "answer": "A list of answers or a text of an answer",
      "openai_auth_error": "Whether the configuration of the large model is invalid, -1: unknown, 0: not invalid, and 1: invalid"
    },
    "RecommendCodeExecutor": {
      "description": "Recommend related standards based on the entered field information.",
      "query": "User query"
    },
    "IntentionUnderstandingExecutor": {
      "description": "Identify the search intent of the user's query and the slot information under the intent.",
      "query": "User query",
      "intent_slots": "The search intent of the query, and the slot information under that intent (the identified entity)"
    },
    "GraphAnalysisServiceExecutor": {
      "description": "The search intent of the user's query is mapped to the corresponding graph analysis service and return the subgraph of search results.",
      "query": "User query",
      "intent_slots": "The search intent of the query, and the slot information under that intent (the identified entity)",
      "subgraph": "Subgraph of search results"
    },
    "AcKnowledgeLinkExecutor": {
      "description": "Identify the relationships, attributes and other knowledge of the specified graph in the user query.",
      "query": "User query",
      "entity_list": "List of entities in user query",
      "knowledge": "Entity, relationship, attribute information of query"
    },
    "RuleBasedKBQAExecutor": {
      "description": "Rule-based KBQA.",
      "query": "User query",
      "knowledge": "Entity, relationship, attribute information of query",
      "graph2answer": "The answer to the user query corresponding to the specified map"
    },
    "OSEntityExtractLinkExecutor": {
      "description": "Entity recognition and linking, only supports exact matches.",
      "query": "User query",
      "kg_list": "Graphs ID list which the users have access",
      "entities": "Identify entity list"
    },
    "PathSimQAExecutor": {
      "description": "Path similarity graph question and answer, including relationship filtering, path recall and sorting, LLM answer filtering module.",
      "query": "User query",
      "kg_list": "Graphs ID list which the users have access",
      "rule_answers": "The answer to the rule KBQA, the default is []. PathSimQA will only be executed when rule_answers is []",
      "entities": "Identify entity list",
      "answers": "List of all text answers and sub-pictures of the question",
      "graph_schema_and_synonyms": "Graph Q&A configuration",
      "embed_model_error": "text vector model is abnormal or not",
      "answer_list": "Question TOP1 answer entity and attribute list",
      "openai_auth_error": "Whether the large model configuration is invalid, -1 means unknown (the status is unknown when the large model is not used), 1 means the configuration is invalid, 0 means the large model is normal",
      "openai_err_type": "Large model error types",
      "rule_answers_out": "The answer to the rule KBQA"
    },
    "IntentGraphAnalysisCognitionGraph": {
      "description": "Identify the intent of the user query and the slot information of the intent, and then call the graph analysis service corresponding to the intent to obtain the subgraph of search results.",
      "query": "User questions"
    },
    "KbqaBeta": {
      "description": "Answer the user query based on the specified knowledge graph, including two methods: rule KBQA and similar path retrieval. When the rule KBQA has an answer, the answer is returned directly; when the rule KBQA answer is empty, the answer obtained by the similar path retrieval is returned.",
      "query": "User query",
      "kg_list": "Graphs ID list which the users have access",
      "ruled_answers": " The answer to the rule KBQA",
      "answers": "Similar path search answers",
      "embed_model_error": "Whether the text vector model is abnormal, True: abnormal; False: normal"
    }
  }
}
