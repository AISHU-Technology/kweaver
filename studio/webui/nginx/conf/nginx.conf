#
# Nginx-webserver for Fx.Neirj: https://www.nginx.com/resources/wiki/start/
#
user nginx;

# nginx worker num. [auto], normal default num of cpu processor (grep ^processor /proc/cpuinfo | wc -l)
worker_processes 1;
# worker_cpu_affinity:
# cpu核心数量为4的情况 worker_processes = 4 -> worker_cpu_affinity 0001 0010 0100 1000;
# cpu核心数量为8的情况 worker_processes = 8 -> worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000;
# worker_cpu_affinity 0001 0010 0100 1000;

# [ debug | info | notice | warn | error | crit ]
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    # 每个worker进程处理的并发最大连接数量，客户端连接计算： 最大连接数 = worker_processes * worker_connections/4
    worker_connections 1024;
    # worker_connections < worker_rlimit_nofile && worker_rlimit_nofile <= 65535 （ulimit -n查看具体数值）
    # worker_rlimit_nofile 1024;
    # use [ kqueue | epoll | select | poll ]，其中epoll在linux内核2.6+使用，windows使用select，*BSD使用kqueue
    use epoll;
}


http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    # 配置最大上传文件body
    client_max_body_size 20m;
    # tcp_nopush on;
    keepalive_timeout 65;
    # 这个将为打开文件指定缓存，默认是没有启用的，max 指定缓存数量，
    # 建议和打开文件数一致，inactive 是指经过多长时间文件没被请求后删除缓存。
    open_file_cache max=102400 inactive=20s;
    # open_file_cache 指令中的inactive 参数时间内文件的最少使用次数，
    # 如果超过这个数字，文件描述符一直是在缓存中打开的，如上例，如果有一个
    # 文件在inactive 时间内一次没被使用，它将被移除。
    open_file_cache_min_uses 1;
    # 这个是指多长时间检查一次缓存的有效信息
    open_file_cache_valid 30s;
    # 默认情况下，Nginx的gzip压缩是关闭的， gzip压缩功能就是可以让你节省不
    # 少带宽，但是会增加服务器CPU的开销哦，Nginx默认只对text/html进行压缩 ，
    # 如果要对html之外的内容进行压缩传输，我们需要手动来设置。
    gzip on;
    gzip_min_length 1k;
    gzip_buffers 4 16k;
    gzip_http_version 1.0;
    gzip_comp_level 2;
    gzip_types text/plain application/x-javascript text/css application/xml;

    # 负载均衡：
    # 1. weight 权重，配置如 server 192.168.180.119:8080 weight=5;
    # 2. ip_hash 访问IP hash，配置如 ip_hash; server 192.168.180.119:8080; 192.168.13.98:8080;
    # 3. fair
    # 4. url_hash
    # server 192.168.180.120:8080 down; -> 此192.168.180.118服务器下线不再做负载均衡节点
    # server 192.168.180.118:8080 max_fails; -> 最大失败数
    # server 192.168.180.117:8080 fail_timeout=5s slow_start=30s; -> 失败后，暂停服务时间
    # server 192.168.180.116:8080  backup; -> 当其他服务均失效后，启用此服务器的服务

    server {
        listen 80;
        server_name localhost;
        index index.html index.htm index.js;

        location / {
            root /var/apphome/web;
            # index index.html index.htm;
            try_files $uri /index.html;
            # add_header Access-Control-Allow-Origin *;
        }
    }

    server {
        listen 443 ssl;
        server_name localhost;
        ssl on;
        ssl_certificate /etc/nginx/ssl/client.crt;
        ssl_certificate_key /etc/nginx/ssl/client.key;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_session_cache    shared:SSL:1m;
        ssl_session_timeout  5m;
        ssl_prefer_server_ciphers  on;
        # charset koi8-r;
        index index.html index.htm index.js;
        # access_log http80-access.log main;
        # error_log http80-error.log warn;

        location / {
            root /var/apphome/web;
            # index index.html index.htm;
            try_files $uri /index.html;
            # add_header Access-Control-Allow-Origin *;
        }
        # error_page 404 /404.html;
        # redirect server error pages to the static page /50x.html
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root html;
        }
    }

    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
}
