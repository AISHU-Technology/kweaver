// Code generated by MockGen. DO NOT EDIT.

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	lock "github.com/kgip/redis-lock/lock"
)

// MockLockOperator is a mock of LockOperator interface.
type MockLockOperator struct {
	ctrl     *gomock.Controller
	recorder *MockLockOperatorMockRecorder
}

// MockLockOperatorMockRecorder is the mock recorder for MockLockOperator.
type MockLockOperatorMockRecorder struct {
	mock *MockLockOperator
}

// NewMockLockOperator creates a new mock instance.
func NewMockLockOperator(ctrl *gomock.Controller) *MockLockOperator {
	mock := &MockLockOperator{ctrl: ctrl}
	mock.recorder = &MockLockOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLockOperator) EXPECT() *MockLockOperatorMockRecorder {
	return m.recorder
}

// GetLock mocks base method.
func (m *MockLockOperator) GetLock(key string, options ...lock.Option) lock.Locker {
	m.ctrl.T.Helper()
	varargs := []interface{}{key}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLock", varargs...)
	ret0, _ := ret[0].(lock.Locker)
	return ret0
}

// GetLock indicates an expected call of GetLock.
func (mr *MockLockOperatorMockRecorder) GetLock(key interface{}, options ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{key}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLock", reflect.TypeOf((*MockLockOperator)(nil).GetLock), varargs...)
}

// Lock mocks base method.
func (m *MockLockOperator) Lock(key string, ctx lock.LockContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", key, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Lock indicates an expected call of Lock.
func (mr *MockLockOperatorMockRecorder) Lock(key, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockLockOperator)(nil).Lock), key, ctx)
}

// TryLock mocks base method.
func (m *MockLockOperator) TryLock(key string, ctx lock.LockContext, timeout time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryLock", key, ctx, timeout)
	ret0, _ := ret[0].(bool)
	return ret0
}

// TryLock indicates an expected call of TryLock.
func (mr *MockLockOperatorMockRecorder) TryLock(key, ctx, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryLock", reflect.TypeOf((*MockLockOperator)(nil).TryLock), key, ctx, timeout)
}

// Unlock mocks base method.
func (m *MockLockOperator) Unlock(key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Unlock indicates an expected call of Unlock.
func (mr *MockLockOperatorMockRecorder) Unlock(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockLockOperator)(nil).Unlock), key)
}
