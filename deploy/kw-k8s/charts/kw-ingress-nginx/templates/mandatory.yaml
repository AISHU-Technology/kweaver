kind: ConfigMap
apiVersion: v1
metadata:
  name: nginx-configuration
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ .Values.image.name }}
    app.kubernetes.io/part-of: {{ .Values.image.name }}

data:
  proxy-connect-timeout: "300"
  proxy-read-timeout: "300"
  proxy-send-timeout: "300"
  proxy-body-size: "200m"

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: tcp-services
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ .Values.image.name }}
    app.kubernetes.io/part-of: {{ .Values.image.name }}

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: udp-services
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ .Values.image.name }}
    app.kubernetes.io/part-of: {{ .Values.image.name }}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-serviceaccount
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ .Values.image.name }}
    app.kubernetes.io/part-of: {{ .Values.image.name }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: nginx-ingress-clusterrole
  labels:
    app.kubernetes.io/name: {{ .Values.image.name }}
    app.kubernetes.io/part-of: {{ .Values.image.name }}
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
      - update
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - get
      - list
      - watch
      - create

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: nginx-ingress-role
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ .Values.image.name }}
    app.kubernetes.io/part-of: {{ .Values.image.name }}
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "ingress-controller-leader-nginx"
      - "ingress-controller-leader"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - get
      - list
      - watch
      - update
      - create


---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: nginx-ingress-role-nisa-binding
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ .Values.image.name }}
    app.kubernetes.io/part-of: {{ .Values.image.name }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress-role
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: {{ .Values.namespace }}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: nginx-ingress-clusterrole-nisa-binding
  labels:
    app.kubernetes.io/name: {{ .Values.image.name }}
    app.kubernetes.io/part-of: {{ .Values.image.name }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-clusterrole
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: {{ .Values.namespace }}

---

apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  labels:
    helm.sh/chart: ingress-nginx-4.0.15
    app.kubernetes.io/name: {{ .Values.image.name }}
    app.kubernetes.io/instance: {{ .Values.image.name }}
    app.kubernetes.io/version: 1.1.1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: {{ .Values.image.name }}
  namespace: {{ .Values.namespace }}
  annotations:
    ingressclass.kubernetes.io/is-default-class: "true"
spec:
  controller: k8s.io/ingress-nginx


---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.image.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: {{ .Values.image.name }}
    app.kubernetes.io/part-of: {{ .Values.image.name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.image.name }}
      app.kubernetes.io/part-of: {{ .Values.image.name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.image.name }}
        app.kubernetes.io/part-of: {{ .Values.image.name }}
      annotations:
        prometheus.io/port: "10254"
        prometheus.io/scrape: "true"
    spec:
#      hostNetwork: true
      # wait up to five minutes for the drain of connections
      terminationGracePeriodSeconds: 300
      serviceAccountName: nginx-ingress-serviceaccount
      nodeSelector:
        kubernetes.io/os: linux
      containers:
        - name: {{ .Values.image.name }}
          image: {{ .Values.image.registry }}{{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - /{{ .Values.image.name }}
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --publish-service=$(POD_NAMESPACE)/{{ .Values.image.name }}
            - --annotations-prefix=nginx.ingress.kubernetes.io
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            # www-data -> 101
            runAsUser: 101
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: {{ .Values.service.https }}
              containerPort: {{ .Values.service.portHttps }}
              hostPort: {{ .Values.service.hostPortHttps }}
              protocol: TCP
          volumeMounts:
            - name: host-time
              mountPath: /etc/localtime
            - name: log
              mountPath: /var/log/nginx/error.log
      volumes:
        - name: log
          hostPath:
            path: {{ .Values.volumes.hostPath }}
        - name: host-time
          hostPath:
            path: /etc/localtime
