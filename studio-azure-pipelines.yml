# Starter pipeline
#

trigger:
  branches:
    include:
      - develop
      - DATA-*
      - Release-*

  path:
    include:
      - studio
    exclude:
      - studio/README.md

pool:
  name: go

parameters:
  - name: jobTag
    displayName: 请手动输入程序的数据库版本值
    type: string
    default: '1.1.3'

variables:
  - group: global-context
  - name: imageTag
    value: $(Build.SourceBranchName)-$(Build.BuildNumber)
  - name: imageName
    value: kg-manager
  - name: imageNameJob
    value: manager
  - name: imageNameJobFtp
    value: kg-manager-job
  - name: imageNameWithHarbor
    value: acr.aishu.cn/ad/kg-manager
  - name: imageNameWithHarborJob
    value: acr.aishu.cn/ad/kg-manager-job
  - name: UTArtifactName
    value: coverageFiles

resources:
  containers:
    - container: job
      endpoint: acr.aishu.cn
      image: ad/ad_go_env:goenv
    - container: utmake
      endpoint: acr.aishu.cn
      image: ad/ad_go_env:goenv
    - container: scanner
      endpoint: acr.aishu.cn
      image: ad/openjdk:11.0.13-jre
    - container: dotnet
      endpoint: acr.aishu.cn
      image: wing-biz/euop/dotnet-runtime:3.1

jobs:
  - job:
    displayName: build
    steps:
      - task: Bash@3
        displayName: job compile
        inputs:
          targetType: 'inline'
          script: |
            pwd
            source ~/.bashrc
            chmod a+x ./buildJob.sh
            ./buildJob.sh

      - task: Docker@2
        displayName: buildImage
        inputs:
          command: 'build'
          repository: $(imageNameWithHarborJob)
          tags: $(mainTag)
          Dockerfile: '**/Dockerfilejob'

      - task: Bash@3
        displayName: saveJobTar
        inputs:
          targetType: 'inline'
          script: |
            docker save -o AnyDATA-$(mainTag)-$(imageNameJob)-${{ parameters.jobTag }}-job-$(Build.BuildNumber).tar $(imageNameWithHarborJob):$(mainTag)
      - task: FtpUpload@2
        displayName: uploadFtp
        inputs:
          credentialsOption: 'inputs'
          serverUrl: 'ftp://ftp-ad.aishu.cn'
          username: '$(ftpUser)'
          password: '$(ftpPasswd)'
          rootDirectory:
          filePatterns: '**/AnyDATA-$(mainTag)-$(imageNameJob)*.tar'
          remoteDirectory: '/packages/$(imageNameJobFtp)/$(Build.SourceBranchName)'
          clean: false
          cleanContents: false
          preservePaths: false
          trustSSL: false

      - task: Bash@3
        displayName: build
        inputs:
          targetType: 'inline'
          script: |
            pwd
            source ~/.bashrc
            chmod a+x ./build.sh
            ./build.sh
#            go test ./test -coverprofile=cover.out -coverpkg=./...services,./...controllers
#            gocov convert cover.out | gocov-xml > ut_coverage.xml
#            go test -v -coverpkg=./...services,./...controllers | go-junit-report > coverage.xml
#            docker run -u root --network=host --rm -v $(Build.Repository.LocalPath):/src -v /root/gocode/:/go --privileged=true ad/graph_builder:1.0.2 sh ./build.sh
#            docker run -u root --network=host --rm -v $(Build.Repository.LocalPath):/src -v /root/gocode/:/go --privileged=true ad_go_env:goenv /bin/bash -c "source /etc/bashrc;go test -coverprofile=cover.out -coverpkg=./...services;gocov convert cover.out | gocov-xml > ut_coverage.xml;go test -v -coverpkg=./...services | go-junit-report > coverage.xml"
      - task: FtpUpload@2
        displayName: utUpload
        inputs:
          credentialsOption: 'inputs'
          serverUrl: 'ftp://ftp-ad.aishu.cn'
          username: '$(ftpUser)'
          password: '$(ftpPasswd)'
          rootDirectory:
          filePatterns: '**/*coverage.xml'
          remoteDirectory: '/report/$(imageName)/$(Build.SourceBranchName)'
          clean: false
          cleanContents: false
          preservePaths: false
          trustSSL: false
      - task: Docker@2
        displayName: buildImage
        inputs:
          command: 'build'
          repository: $(imageNameWithHarbor)
          tags: $(mainTag)
          Dockerfile: '**/Dockerfile'
      - task: Docker@2
        inputs:
          containerRegistry: 'acr.aishu.cn'
          command: 'login'
      - task: Bash@3
        displayName: saveTar
        inputs:
          targetType: 'inline'
          script: |
            docker save -o AnyDATA-$(mainTag)-kg-manager-$(imageTag).tar $(imageNameWithHarbor):$(mainTag)
      - task: FtpUpload@2
        displayName: uploadFtp
        inputs:
          credentialsOption: 'inputs'
          serverUrl: 'ftp://ftp-ad.aishu.cn'
          username: '$(ftpUser)'
          password: '$(ftpPasswd)'
          rootDirectory:
          filePatterns: '**/AnyDATA-$(mainTag)-kg-manager-$(imageTag).tar'
          remoteDirectory: '/packages/$(imageName)/$(Build.SourceBranchName)'
          clean: false
          cleanContents: false
          preservePaths: false
          trustSSL: false
  - job: utmake
    container: utmake
    displayName: utmake
    workspace:
      clean: all
    steps:
      - checkout: self
      - script: |
          rm -rf coverage_report
          mkdir coverage_report
          source /etc/bashrc
          go env -w GOPROXY="https://goproxy.cn"

          go test ./test -coverprofile=coverage_report/cover.out -coverpkg=./...services,./...controllers
          gocov convert coverage_report/cover.out | gocov-xml > coverage_report/ut_coverage.xml
          go test ./test -v -coverpkg=./...services,./...controllers | go-junit-report > coverage_report/coverage.xml
      - task: CopyFiles@2
        inputs:
          SourceFolder: $(Build.SourcesDirectory)
          contents: |
            coverage_report/**
          targetFolder: $(Build.BinariesDirectory)
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.BinariesDirectory)'
          ArtifactName: ${{variables.UTArtifactName}}

  - job: coverage
    displayName: coverage
    container: dotnet
    dependsOn: utmake
    steps:
      - checkout: none
      - task: DownloadBuildArtifacts@0
        inputs:
          artifactName: ${{variables.UTArtifactName}}
          downloadPath: $(Build.SourcesDirectory)

      - task: PublishCodeCoverageResults@1
        displayName: Publish ALL Code Coverage Report
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(Build.SourcesDirectory)/coverageFiles/coverage_report/ut_coverage.xml'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFormat: "JUnit"
          testResultsFiles: '$(Build.SourcesDirectory)/coverageFiles/coverage_report/coverage.xml'
          testRunTitle: 'UT Result'
          failTaskOnFailedTests: true
        displayName: 'Publish linting and unit test results'

  - job: scan
    displayName: 静态扫描
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
    container: scanner
    dependsOn: [ utmake, coverage ]
    workspace:
      clean: all
    steps:
      - task: SonarQubePrepare@4
        displayName: Prepare SonarQube
        inputs:
          SonarQube: 'adS'
          scannerMode: 'CLI'
          configMode: 'manual'
          cliProjectKey: 'sonar.gmanagerManager'
          cliProjectName: 'gmanagerManager'
          cliSources: '.'

      - task: SonarQubeAnalyze@4
        displayName: Run SonarQube Code Analysis task

      - task: SonarQubePublish@4
        displayName: Publish Quality Gate Result task
        inputs:
          pollingTimeoutSec: '300'




